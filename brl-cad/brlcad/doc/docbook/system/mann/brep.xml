<?xml version="1.0" encoding="utf-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="brep">

  <refmeta>
    <refentrytitle>BREP</refentrytitle>
    <manvolnum>nged</manvolnum>
    <refmiscinfo class='source'>BRL-CAD</refmiscinfo>
    <refmiscinfo class='manual'>BRL-CAD MGED User Commands</refmiscinfo>
  </refmeta>

  <refnamediv xml:id='name'>
    <refname>brep</refname>
    <refpurpose>
      The <command>brep</command> command is the primary means in BRL-CAD for working
      with NURBS boundary representation objects (a.k.a brep objects).  Because there
      is a large amount of functionality implemented for this purpose, the
      <command>brep</command> command defines subcommands to organize these capabilities.
    </refpurpose>
  </refnamediv>

  <!-- body begins here -->
  <refsynopsisdiv xml:id='synopsis'>
    <cmdsynopsis>
      <command>brep</command>
      <arg choice="req" rep="norepeat"><replaceable>obj</replaceable></arg>
      <group choice="opt" rep="norepeat">
        <arg choice="plain" rep="norepeat"><replaceable>bool</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>bot</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>bots</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>brep</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>csg</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>flip</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>info</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>intersect</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>pick</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>plate_mode</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>plot</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>selection</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>solid</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>split</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>shrink_surfaces</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>tikz</replaceable></arg>
        <arg choice="plain" rep="norepeat"><replaceable>valid</replaceable></arg>
      </group>
      <arg choice="opt" rep="norepeat"><replaceable>arguments</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection xml:id='description'>
    <title>DESCRIPTION</title>
    <para>
      The <command>brep</command> exposes a combination of BRep manipulation functionality
      both defined in the OpenNURBS libraries and implemented in
      BRL-CAD's own libraries.  Also handled by this command are a number
      of type conversions - in particular, <command>bot</command> subcommands
      will generate meshes from BRep data and the <command>csg</command>
      subcommand will attempt to find a CSG implicit representation of the
      shape of a specified NURBS BRep.  Also, the <command>brep</command> subcommand
      will attempt to generate a BRep representation of the specified CSG object.
    </para>

    <para>
      A number of the problems these commands attempt to address are known to be
      extremely difficult problems - <command>bool</command> is a particular case in point,
      but the <command>bot</command> and <command>csg</command> commands also attempt
      to implement very challenging algorithms.  Users using these commands should expect
      to encounter problems and are advised to first back up the .g file they will be
      operating on before applying them.
    </para>

    <para>
      The available subcommands are:
    </para>

    <variablelist>
      <cmdsynopsis>
        <command>bool</command>
        <arg choice="req" rep="norepeat"><replaceable>op</replaceable></arg>
        <arg choice="req" rep="norepeat"><replaceable>obj2</replaceable></arg>
        <arg choice="req" rep="norepeat"><replaceable>output_objname</replaceable></arg>
      </cmdsynopsis>
      <varlistentry>
        <term></term>
        <listitem>
          <para>
            Attempt to peform a BRep boolean evaluation and produce a new BRep object.
	    Supported ops are <emphasis remap="I">u</emphasis> (union),
	    <emphasis remap="I">-</emphasis> (subtract),
	    <emphasis remap="I">i</emphasis> (intersect), and
	    <emphasis remap="I">x</emphasis> (exclusive or).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
        <command>bot</command>
      </cmdsynopsis>
      <varlistentry>
        <term></term>
        <listitem>
          <para>
            Attempt to produce a triangle mesh from the object. Unlike the visualization
	    triangulation, this algorithm spends more time attempting to produce a solid,
	    clean mesh.  Outputs the result in an object called <emphasis remap="I">obj.bot</emphasis>
	    where <emphasis remap="I">obj</emphasis> is the original BRep object name.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
        <command>bots</command>
        <arg choice="req" rep="norepeat"><replaceable>op</replaceable></arg>
        <arg choice="req" rep="norepeat"><replaceable>obj1</replaceable></arg>
        <arg choice="opt" rep="repeat"><replaceable>objN</replaceable></arg>
      </cmdsynopsis>
      <varlistentry>
        <term></term>
        <listitem>
          <para>
            Attempt to produce triangle meshes for multiple objects that don't overlap. Experimental.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>brep</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Attempt to produce a brep object to represent the specified CSG object. Generally
	    only useful for solid objects.  Outputs the result in an object called
	    <emphasis remap="I">obj.brep</emphasis>
	    where <emphasis remap="I">obj</emphasis> is the original CSG object name.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
 
    <variablelist>
      <cmdsynopsis>
	<command>csg</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Attempt to produce a CSG hierarchy that reproduces the shape of the brep object.
	    Objects will use the root of the original obj name to generate solid names. If a
	    BRep can't be fully represented as CSG, it will be broken down into a combination
	    of simplified BReps and CSG solids.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>flip</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Flip all face normals on the specified BRep.  Can be useful if a conversion results
	    in importing faces with the normals reversed.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>info</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Report textual information about a BRep.  See the brep_info man page for more detail.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>intersect</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Calculate intersections between BRep object components.  Primarly an option for low
	    level testing of <command>bool</command> routines.  See the brep_intersect man page
	    for more detail.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
        <command>pick</command>
        <arg choice="req" rep="norepeat"><replaceable>E|F|V</replaceable></arg>
        <arg choice="opt" rep="repeat"><replaceable>px py pz dx dy dz</replaceable></arg>
      </cmdsynopsis>
      <varlistentry>
        <term></term>
        <listitem>
          <para>
            Select the closest edge, face or vertex to either the specified ray, or to
	    the currently defined GED view center and direction.  (NOTE: for faces this actually
	    a rather difficult problem, requiring a solution to the closest NURBS surface
	    point to a line problem.  Not sure that even the LIBRT ray intersection code has what's
	    needed to do this right - current method implemented as of 2022 probably won't
            reliably give us the actual closest face.)
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

     <variablelist>
      <cmdsynopsis>
        <command>plate_mode</command>
        <arg choice="opt" rep="repeat"><replaceable>#|cos|nocos</replaceable></arg>
      </cmdsynopsis>
      <varlistentry>
        <term></term>
        <listitem>
          <para>
            Report and set plate mode properties of BRep objects.  Will not work on
	    a solid BRep - to generate a plate mode BRep, see <command>split</command>.
	    If a number is supplied the plate thickness is set.  Passing cos or nocos
	    will toggle how an interseting ray should interpret the thickness as a
	    function of ray hit angle - nocos reports the same thickness for all
	    angles, while cos attempts to adjust for shallow ray hits.  If no options
	    are supplied, just report the current thickness and cos/nocos setting.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>plot</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Visualize components and data associated with a BRep.  See the brep_plot man page for more detail.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>selection</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Manipulate elements of a BRep.  See the brep_selection man page for more detail.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>solid</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Report if the BRep object is solid (i.e. defines a closed volume in space,
	    within tolerance.)  In the general case this is a hard problem - this report
	    is helpful but may not catch all potential problems.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>shrink_surfaces</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Uses an opennurbs routine to tightening the definition of face surfaces to more
	    closely match the uv paramater space of the trimming loops.  typically this
	    isn't something users will need to worry about too much, but it can occasionally
	    improve the visualization behavior of an oddly defined brep.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>tikz</command>
        <arg choice="req" rep="norepeat"><replaceable>output_file</replaceable></arg>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Generates plotting output for the object using the TikZ plotting language. The
	    output is intended for incorporation into documents being typeset with LaTeX and
	    the PGF plotting package.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <cmdsynopsis>
	<command>valid</command>
      </cmdsynopsis>
      <varlistentry>
	<term></term>
	<listitem>
	  <para>
	    Report if the BRep object is topologically valid.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </refsection>
  
  <refsection xml:id='author'>
    <title>AUTHOR</title>
    <para>BRLCAD-TEAM</para>
  </refsection>

  <refsection xml:id='bug_reports'>
    <title>BUG REPORTS</title>
    <para>
      Reports of bugs or problems should be submitted via electronic
      mail to <email>devs@brlcad.org</email>
    </para>
  </refsection>
</refentry>

