<refentry xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="who">

  <refmeta>
    <refentrytitle>PROCESS</refentrytitle>
    <manvolnum>nged</manvolnum>
    <refmiscinfo class="source">BRL-CAD</refmiscinfo>
    <refmiscinfo class="manual">BRL-CAD MGED Commands</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="name">
    <refname>process</refname>
    <refpurpose>List and manage currently running subprocesses.</refpurpose>
  </refnamediv>

  <!-- body begins here -->
  <refsynopsisdiv xml:id="synopsis">
    <cmdsynopsis sepchar=" ">
      <command>process</command>
    </cmdsynopsis>
    <cmdsynopsis sepchar=" ">
      <command>process list</command>
    </cmdsynopsis>
    <cmdsynopsis sepchar=" ">
      <command>process pabort</command>
      <arg choice="req" rep="norepeat">pid</arg>
    </cmdsynopsis>
    <cmdsynopsis sepchar=" ">
      <command>process gabort</command>
      <arg choice="req" rep="norepeat">glob</arg>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsection xml:id="description"><title>DESCRIPTION</title>
    <para>
      The <command>process</command> offers a program-agnostic means of managing subprocesses
      launched by a GED application.  The most common instances of this phenomena are long
      running <command>rt</command> commands on large models, but there are other commands
      such as <command>rtcheck</command> that also operate in this asynchronous manner.  If
      one of these processes is running too long or consuming too many resources, <command>process</command>
      allows users to identify and stop these processes from the GED command line.
    </para>
  </refsection>

  <refsection xml:id="examples"><title>EXAMPLES</title>

    <para>
      The below examples walk through a sample <command>process</command> workflow:
    </para>

  <example><title>Process Help</title>
    <para>
      <prompt>mged&gt; </prompt><userinput>process</userinput>
      <literallayout class="normal">
Usage: process [subcommand]

Subcommands:

  list          - List all currently running subprocesses.
  pabort &lt;pid&gt;  - Abort the specified subprocess.

  gabort &lt;glob&gt; - Abort all subprocesses whose command matches the glob expression.
      </literallayout>
    </para>
  </example>

  <example><title>List Currently Running Processes</title>
    <para>
      <prompt>mged&gt; </prompt><userinput>process list</userinput>
      <literallayout class="normal">
    PID CMD
5524692 rt -M -u model /home/user/test.g
6515118 rtcheck -M /home/user/test.g obj
      </literallayout>
    </para>
  </example>

  <example><title>Eliminate a Running Subprocess</title>
    <para>
      <prompt>mged&gt; </prompt><userinput>process pabort 6515118</userinput>
    </para>
    <para>
      Using the reported PID from <command>process list</command>, the above line terminates the <command>rtcheck</command> subprocess.
    </para>
  </example>

</refsection>

<refsection xml:id="author"><title>AUTHOR</title><para>BRL-CAD Team</para></refsection>

<refsection xml:id="bug_reports"><title>BUG REPORTS</title>

  <para>
    Reports of bugs or problems should be submitted via electronic
    mail to <email>devs@brlcad.org</email>
  </para>
</refsection>
</refentry>

<!-- vim: set shiftwidth=2 : -->

